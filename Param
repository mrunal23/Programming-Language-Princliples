#lang racket
(require C311/pmatch)

;program 1,5
;call by value

(define val-of-cbv
  (lambda (exp env)
    (pmatch exp
      [`,b (guard (boolean? b)) b]
      [`,n (guard (number? n)) n]
      [`(zero? ,n) (zero? (val-of-cbv n env))]
      [`(sub1 ,n) (sub1 (val-of-cbv n env))]
      [`(add1 ,n) (add1 (val-of-cbv n env))]
      [`(quote ()) '()]
      [`(let ((,x ,e)) ,body) (let ((a (box (val-of-cbv e env))))
                                (val-of-cbv body (extend-env x a env)))]
      [`(null? ,ls) (null? (val-of-cbv ls env))]
      [`(* ,n1 ,n2) (* (val-of-cbv n1 env) (val-of-cbv n2 env))]
      [`(if ,test ,conseq ,alt) (if (val-of-cbv test env)
                                  (val-of-cbv conseq env)
                                  (val-of-cbv alt env))]
      [`(cons ,e1 ,e2) (cons (val-of-cbv e1 env) (val-of-cbv e2 env))]
      [`(car ,e1) (car (val-of-cbv e1 env))]
      [`(cdr ,e1) (cdr (val-of-cbv e1 env))]
      [`(cons^ ,e1 ,e2) (cons (box (lambda() (val-of-cbv e1 env))) (box (lambda() (val-of-cbv e2 env))))]
      [`(car^ ,e1) (unbox/need (car (val-of-cbv e1 env)))]
      [`(cdr^ ,e1) (unbox/need (cdr (val-of-cbv e1 env)))]
      [`(set! ,x ,rhs) (set-box! (apply-env env x) (val-of-cbv rhs env))]
      [`(begin2 ,e1 ,e2) (begin (val-of-cbv e1 env) (val-of-cbv e2 env))]
      [`(random ,n) (random (val-of-cbv n env))]
      [`,x (guard (symbol? x)) (unbox (apply-env env x))]
      [`(lambda (,x) ,body) (closure x body env)]
      [`(,rator ,x) (guard(symbol? x)) ((val-of-cbv rator env) (box (unbox (apply-env env x))))]
      [`(,rator ,rand) (apply-closure (val-of-cbv rator env)
                                      (box (val-of-cbv rand env)))])))

(define empty-env
  (lambda null
    (lambda (y) ('error 'value-of "unbound indentifier ~s" y))))

(define apply-closure
  (lambda (p a)
    (p a)))

(define closure
  (lambda (x body env)
    (lambda (a) (val-of-cbv body (extend-env x a env)))))

(define extend-env
  (lambda (x a env)
    (lambda (y) (if (eqv? y x) a (apply-env env y)))))

(define apply-env
  (lambda (env y)
    (env y)))

;problem 2
;call by reference

(define val-of-cbr
  (lambda (exp env)
    (pmatch exp
      [`,b (guard (boolean? b)) b]
      [`,n (guard (number? n)) n]
      [`(zero? ,n) (zero? (val-of-cbr n env))]
      [`(sub1 ,n) (sub1 (val-of-cbr n env))]
      [`(* ,n1 ,n2) (* (val-of-cbr n1 env) (val-of-cbr n2 env))]
      [`(+ ,n1 ,n2) (+ (val-of-cbr n1 env) (val-of-cbr n2 env))]
      [`(if ,test ,conseq ,alt) (if (val-of-cbr test env)
                                  (val-of-cbr conseq env)
                                  (val-of-cbr alt env))]
      [`(set! ,x ,rhs) (set-box! (apply-env env x) (val-of-cbr rhs env))]
      [`(begin2 ,e1 ,e2) (begin (val-of-cbr e1 env) (val-of-cbr e2 env))]
      [`(let ((,x ,a)) ,body) (let ((b (box(val-of-cbr a env)))) (val-of-cbr body (extend-env x b env)))]
      [`(random ,n) (random (val-of-cbr n env))]
      [`,x (guard (symbol? x)) (unbox (apply-env env x))]
      [`(lambda (,x) ,body) (closure-cbr x body env)]
      [`(,rator ,x) (guard(symbol? x)) ((val-of-cbr rator env) (apply-env env x))]
      [`(,rator ,rand) (apply-closure (val-of-cbr rator env)
                                      (box (val-of-cbr rand env)))])))

(define closure-cbr
  (lambda (x body env)
    (lambda (a) (val-of-cbr body (extend-env x a env)))))


;problem 3
;call by name

(define val-of-cbname
  (lambda (exp env)
    (pmatch exp
      [`,b (guard (boolean? b)) b]
      [`,n (guard (number? n)) n]
      [`(zero? ,n) (zero? (val-of-cbname n env))]
      [`(sub1 ,n) (sub1 (val-of-cbname n env))]
      [`(* ,n1 ,n2) (* (val-of-cbname n1 env) (val-of-cbname n2 env))]
      [`(if ,test ,conseq ,alt) (if (val-of-cbname test env)
                                  (val-of-cbname conseq env)
                                  (val-of-cbname alt env))]
      [`(random ,n) (random (val-of-cbname n env))]
      [`,x (guard (symbol? x)) ((unbox (apply-env env x)))]
      [`(lambda (,x) ,body) (closure-cbname x body env)]
      [`(,rator ,x) (guard(symbol? x)) ((val-of-cbname rator env) (apply-env env x))]
      [`(,rator ,rand) (apply-closure (val-of-cbname rator env)
                                      (box (lambda () (val-of-cbname rand env))))])))

(define closure-cbname
  (lambda (x body env)
    (lambda (a) (val-of-cbname body (extend-env x a env))))) 

;problem 4
;call by need

(define unbox/need
  (lambda (b)
    (let ([val ((unbox b))])
      (set-box! b (lambda () val))
      val)))  
  
(define val-of-cbneed
  (lambda (exp env)
    (pmatch exp
      [`,b (guard (boolean? b)) b]
      [`,n (guard (number? n)) n]
      [`(zero? ,n) (zero? (val-of-cbneed n env))]
      [`(sub1 ,n) (sub1 (val-of-cbneed n env))]
      [`(* ,n1 ,n2) (* (val-of-cbneed n1 env) (val-of-cbneed n2 env))]
      [`(if ,test ,conseq ,alt) (if (val-of-cbneed test env)
                                  (val-of-cbneed conseq env)
                                  (val-of-cbname alt env))]
      [`(random ,n) (random (val-of-cbneed n env))]
      [`,x (guard (symbol? x)) (unbox/need (apply-env env x))]
      [`(lambda (,x) ,body) (closure-cbneed x body env)]
      [`(,rator ,x) (guard(symbol? x)) ((val-of-cbneed rator env) (apply-env env x))]
      [`(,rator ,rand) (apply-closure (val-of-cbneed rator env) (box (lambda () (val-of-cbneed rand env))))])))


(define closure-cbneed
  (lambda (x body env)
    (lambda (a) (val-of-cbneed body (extend-env x a env)))))

